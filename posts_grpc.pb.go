// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: posts.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsAPIClient is the client API for PostsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsAPIClient interface {
	CreatePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error)
	DeletePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error)
	UpdatePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error)
}

type postsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsAPIClient(cc grpc.ClientConnInterface) PostsAPIClient {
	return &postsAPIClient{cc}
}

func (c *postsAPIClient) CreatePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error) {
	out := new(PostsReply)
	err := c.cc.Invoke(ctx, "/posts.PostsAPI/createPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsAPIClient) DeletePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error) {
	out := new(PostsReply)
	err := c.cc.Invoke(ctx, "/posts.PostsAPI/deletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsAPIClient) UpdatePost(ctx context.Context, in *PostArgs, opts ...grpc.CallOption) (*PostsReply, error) {
	out := new(PostsReply)
	err := c.cc.Invoke(ctx, "/posts.PostsAPI/updatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsAPIServer is the server API for PostsAPI service.
// All implementations must embed UnimplementedPostsAPIServer
// for forward compatibility
type PostsAPIServer interface {
	CreatePost(context.Context, *PostArgs) (*PostsReply, error)
	DeletePost(context.Context, *PostArgs) (*PostsReply, error)
	UpdatePost(context.Context, *PostArgs) (*PostsReply, error)
	mustEmbedUnimplementedPostsAPIServer()
}

// UnimplementedPostsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostsAPIServer struct {
}

func (UnimplementedPostsAPIServer) CreatePost(context.Context, *PostArgs) (*PostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsAPIServer) DeletePost(context.Context, *PostArgs) (*PostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostsAPIServer) UpdatePost(context.Context, *PostArgs) (*PostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsAPIServer) mustEmbedUnimplementedPostsAPIServer() {}

// UnsafePostsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsAPIServer will
// result in compilation errors.
type UnsafePostsAPIServer interface {
	mustEmbedUnimplementedPostsAPIServer()
}

func RegisterPostsAPIServer(s grpc.ServiceRegistrar, srv PostsAPIServer) {
	s.RegisterService(&PostsAPI_ServiceDesc, srv)
}

func _PostsAPI_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsAPIServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsAPI/createPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsAPIServer).CreatePost(ctx, req.(*PostArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsAPI_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsAPIServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsAPI/deletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsAPIServer).DeletePost(ctx, req.(*PostArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsAPI_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsAPIServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsAPI/updatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsAPIServer).UpdatePost(ctx, req.(*PostArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsAPI_ServiceDesc is the grpc.ServiceDesc for PostsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts.PostsAPI",
	HandlerType: (*PostsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createPost",
			Handler:    _PostsAPI_CreatePost_Handler,
		},
		{
			MethodName: "deletePost",
			Handler:    _PostsAPI_DeletePost_Handler,
		},
		{
			MethodName: "updatePost",
			Handler:    _PostsAPI_UpdatePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts.proto",
}
